//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TageerEntities : DbContext
    {
        public TageerEntities()
            : base("name=TageerEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdComment> AdComments { get; set; }
        public virtual DbSet<AdDirectFieldDetail> AdDirectFieldDetails { get; set; }
        public virtual DbSet<AdFavorite> AdFavorites { get; set; }
        public virtual DbSet<AdGroupsDetail> AdGroupsDetails { get; set; }
        public virtual DbSet<AdIndividualFieldsDetail> AdIndividualFieldsDetails { get; set; }
        public virtual DbSet<Ad> Ads { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<DirectField> DirectFields { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<GroupsDisplayType> GroupsDisplayTypes { get; set; }
        public virtual DbSet<GroupsItem> GroupsItems { get; set; }
        public virtual DbSet<IndividualField> IndividualFields { get; set; }
        public virtual DbSet<RentalDirectField> RentalDirectFields { get; set; }
        public virtual DbSet<RentalGroupsItem> RentalGroupsItems { get; set; }
        public virtual DbSet<RentalIndividualField> RentalIndividualFields { get; set; }
        public virtual DbSet<RentalMark> RentalMarks { get; set; }
        public virtual DbSet<RentalMaterial> RentalMaterials { get; set; }
        public virtual DbSet<RentalTimesType> RentalTimesTypes { get; set; }
        public virtual DbSet<SubCategory> SubCategories { get; set; }
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<AlbumFile> AlbumFiles { get; set; }
        public virtual DbSet<Album> Albums { get; set; }
        public virtual DbSet<AllFile> AllFiles { get; set; }
        public virtual DbSet<AppsInformation> AppsInformations { get; set; }
        public virtual DbSet<Area> Areas { get; set; }
        public virtual DbSet<ChatMessage> ChatMessages { get; set; }
        public virtual DbSet<Chat> Chats { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<CompanyOffice> CompanyOffices { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<EmailsSubscription> EmailsSubscriptions { get; set; }
        public virtual DbSet<FileType> FileTypes { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<InputsType> InputsTypes { get; set; }
        public virtual DbSet<LanguageType> LanguageTypes { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Mark> Marks { get; set; }
        public virtual DbSet<Material> Materials { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<Nationality> Nationalities { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<Page> Pages { get; set; }
        public virtual DbSet<PagesManagement> PagesManagements { get; set; }
        public virtual DbSet<PagesRole> PagesRoles { get; set; }
        public virtual DbSet<Province> Provinces { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Seo> Seos { get; set; }
        public virtual DbSet<Size> Sizes { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<SubMenu> SubMenus { get; set; }
        public virtual DbSet<TechnicalSupport> TechnicalSupports { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UsersPrivateNotify> UsersPrivateNotifies { get; set; }
        public virtual DbSet<AdVisitor> AdVisitors { get; set; }
    
        public virtual ObjectResult<GetAdIndividualFieldsDetails_Result> GetAdIndividualFieldsDetails(Nullable<int> adId)
        {
            var adIdParameter = adId.HasValue ?
                new ObjectParameter("adId", adId) :
                new ObjectParameter("adId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAdIndividualFieldsDetails_Result>("GetAdIndividualFieldsDetails", adIdParameter);
        }
    
        public virtual ObjectResult<GetNotificationsByFilter_Result> GetNotificationsByFilter(Nullable<int> skip, Nullable<int> take, Nullable<long> userId, Nullable<bool> isRead, Nullable<bool> isAlsoToAdmin)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            var isReadParameter = isRead.HasValue ?
                new ObjectParameter("isRead", isRead) :
                new ObjectParameter("isRead", typeof(bool));
    
            var isAlsoToAdminParameter = isAlsoToAdmin.HasValue ?
                new ObjectParameter("isAlsoToAdmin", isAlsoToAdmin) :
                new ObjectParameter("isAlsoToAdmin", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNotificationsByFilter_Result>("GetNotificationsByFilter", skipParameter, takeParameter, userIdParameter, isReadParameter, isAlsoToAdminParameter);
        }
    
        public virtual ObjectResult<GetTechnicalSupports_Result> GetTechnicalSupports(Nullable<int> skip, Nullable<int> take, Nullable<bool> isRead)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var isReadParameter = isRead.HasValue ?
                new ObjectParameter("isRead", isRead) :
                new ObjectParameter("isRead", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTechnicalSupports_Result>("GetTechnicalSupports", skipParameter, takeParameter, isReadParameter);
        }
    
        public virtual ObjectResult<GetUserNotifications_Result> GetUserNotifications(Nullable<int> userId, Nullable<long> lastNotifiId, Nullable<int> takeCount)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var lastNotifiIdParameter = lastNotifiId.HasValue ?
                new ObjectParameter("lastNotifiId", lastNotifiId) :
                new ObjectParameter("lastNotifiId", typeof(long));
    
            var takeCountParameter = takeCount.HasValue ?
                new ObjectParameter("takeCount", takeCount) :
                new ObjectParameter("takeCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserNotifications_Result>("GetUserNotifications", userIdParameter, lastNotifiIdParameter, takeCountParameter);
        }
    
        public virtual ObjectResult<SeelctChatByUserRecivedName_Result> SeelctChatByUserRecivedName(string userName, Nullable<int> userLoggedId)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userLoggedIdParameter = userLoggedId.HasValue ?
                new ObjectParameter("UserLoggedId", userLoggedId) :
                new ObjectParameter("UserLoggedId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SeelctChatByUserRecivedName_Result>("SeelctChatByUserRecivedName", userNameParameter, userLoggedIdParameter);
        }
    
        public virtual ObjectResult<SelectAdBottomBar_Result> SelectAdBottomBar(Nullable<int> adId, Nullable<int> categoryId, Nullable<int> subCategoryId)
        {
            var adIdParameter = adId.HasValue ?
                new ObjectParameter("adId", adId) :
                new ObjectParameter("adId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAdBottomBar_Result>("SelectAdBottomBar", adIdParameter, categoryIdParameter, subCategoryIdParameter);
        }
    
        public virtual ObjectResult<SelectAdComments_Result> SelectAdComments(Nullable<int> lastCommentId, Nullable<int> take, Nullable<int> adId)
        {
            var lastCommentIdParameter = lastCommentId.HasValue ?
                new ObjectParameter("lastCommentId", lastCommentId) :
                new ObjectParameter("lastCommentId", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var adIdParameter = adId.HasValue ?
                new ObjectParameter("adId", adId) :
                new ObjectParameter("adId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAdComments_Result>("SelectAdComments", lastCommentIdParameter, takeParameter, adIdParameter);
        }
    
        public virtual ObjectResult<SelectAdDetails_Result> SelectAdDetails(Nullable<int> adId)
        {
            var adIdParameter = adId.HasValue ?
                new ObjectParameter("adId", adId) :
                new ObjectParameter("adId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAdDetails_Result>("SelectAdDetails", adIdParameter);
        }
    
        public virtual ObjectResult<SelectAdGroupsDetails_Result> SelectAdGroupsDetails(Nullable<int> adId)
        {
            var adIdParameter = adId.HasValue ?
                new ObjectParameter("adId", adId) :
                new ObjectParameter("adId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAdGroupsDetails_Result>("SelectAdGroupsDetails", adIdParameter);
        }
    
        public virtual ObjectResult<SelectAdsByFilter_Result> SelectAdsByFilter(Nullable<int> lastAdId, Nullable<int> take, Nullable<long> userLoggadId, string title_Search, Nullable<long> userCreateId_Search, Nullable<int> categoryId_Search, Nullable<int> subCategoryId_Search, Nullable<int> countryId_Search, Nullable<int> provinceId_Search, Nullable<bool> currentUserIsFavorite, Nullable<bool> orderBy_AmountDesc, Nullable<bool> orderBy_AmountAsc)
        {
            var lastAdIdParameter = lastAdId.HasValue ?
                new ObjectParameter("lastAdId", lastAdId) :
                new ObjectParameter("lastAdId", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var userLoggadIdParameter = userLoggadId.HasValue ?
                new ObjectParameter("UserLoggadId", userLoggadId) :
                new ObjectParameter("UserLoggadId", typeof(long));
    
            var title_SearchParameter = title_Search != null ?
                new ObjectParameter("title_Search", title_Search) :
                new ObjectParameter("title_Search", typeof(string));
    
            var userCreateId_SearchParameter = userCreateId_Search.HasValue ?
                new ObjectParameter("userCreateId_Search", userCreateId_Search) :
                new ObjectParameter("userCreateId_Search", typeof(long));
    
            var categoryId_SearchParameter = categoryId_Search.HasValue ?
                new ObjectParameter("categoryId_Search", categoryId_Search) :
                new ObjectParameter("categoryId_Search", typeof(int));
    
            var subCategoryId_SearchParameter = subCategoryId_Search.HasValue ?
                new ObjectParameter("subCategoryId_Search", subCategoryId_Search) :
                new ObjectParameter("subCategoryId_Search", typeof(int));
    
            var countryId_SearchParameter = countryId_Search.HasValue ?
                new ObjectParameter("countryId_Search", countryId_Search) :
                new ObjectParameter("countryId_Search", typeof(int));
    
            var provinceId_SearchParameter = provinceId_Search.HasValue ?
                new ObjectParameter("ProvinceId_Search", provinceId_Search) :
                new ObjectParameter("ProvinceId_Search", typeof(int));
    
            var currentUserIsFavoriteParameter = currentUserIsFavorite.HasValue ?
                new ObjectParameter("CurrentUserIsFavorite", currentUserIsFavorite) :
                new ObjectParameter("CurrentUserIsFavorite", typeof(bool));
    
            var orderBy_AmountDescParameter = orderBy_AmountDesc.HasValue ?
                new ObjectParameter("orderBy_AmountDesc", orderBy_AmountDesc) :
                new ObjectParameter("orderBy_AmountDesc", typeof(bool));
    
            var orderBy_AmountAscParameter = orderBy_AmountAsc.HasValue ?
                new ObjectParameter("orderBy_AmountAsc", orderBy_AmountAsc) :
                new ObjectParameter("orderBy_AmountAsc", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAdsByFilter_Result>("SelectAdsByFilter", lastAdIdParameter, takeParameter, userLoggadIdParameter, title_SearchParameter, userCreateId_SearchParameter, categoryId_SearchParameter, subCategoryId_SearchParameter, countryId_SearchParameter, provinceId_SearchParameter, currentUserIsFavoriteParameter, orderBy_AmountDescParameter, orderBy_AmountAscParameter);
        }
    
        public virtual ObjectResult<string> SelectAlbumImages(Nullable<int> albumId)
        {
            var albumIdParameter = albumId.HasValue ?
                new ObjectParameter("albumId", albumId) :
                new ObjectParameter("albumId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SelectAlbumImages", albumIdParameter);
        }
    
        public virtual ObjectResult<SelectEmailsSubscriptionsByFilter_Result> SelectEmailsSubscriptionsByFilter(Nullable<int> skip, Nullable<int> take, Nullable<System.DateTime> dateTime_From, Nullable<System.DateTime> dateTime_To, string email_search)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var dateTime_FromParameter = dateTime_From.HasValue ?
                new ObjectParameter("DateTime_From", dateTime_From) :
                new ObjectParameter("DateTime_From", typeof(System.DateTime));
    
            var dateTime_ToParameter = dateTime_To.HasValue ?
                new ObjectParameter("DateTime_To", dateTime_To) :
                new ObjectParameter("DateTime_To", typeof(System.DateTime));
    
            var email_searchParameter = email_search != null ?
                new ObjectParameter("email_search", email_search) :
                new ObjectParameter("email_search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectEmailsSubscriptionsByFilter_Result>("SelectEmailsSubscriptionsByFilter", skipParameter, takeParameter, dateTime_FromParameter, dateTime_ToParameter, email_searchParameter);
        }
    
        public virtual ObjectResult<SelectLastMessage_Result> SelectLastMessage(Nullable<int> userLoggedId, Nullable<int> userRecivedId)
        {
            var userLoggedIdParameter = userLoggedId.HasValue ?
                new ObjectParameter("UserLoggedId", userLoggedId) :
                new ObjectParameter("UserLoggedId", typeof(int));
    
            var userRecivedIdParameter = userRecivedId.HasValue ?
                new ObjectParameter("UserRecivedId", userRecivedId) :
                new ObjectParameter("UserRecivedId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectLastMessage_Result>("SelectLastMessage", userLoggedIdParameter, userRecivedIdParameter);
        }
    
        public virtual ObjectResult<SelectMessages_Result> SelectMessages(Nullable<int> lastMessageId, Nullable<int> take, Nullable<int> chatId)
        {
            var lastMessageIdParameter = lastMessageId.HasValue ?
                new ObjectParameter("LastMessageId", lastMessageId) :
                new ObjectParameter("LastMessageId", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var chatIdParameter = chatId.HasValue ?
                new ObjectParameter("ChatId", chatId) :
                new ObjectParameter("ChatId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectMessages_Result>("SelectMessages", lastMessageIdParameter, takeParameter, chatIdParameter);
        }
    
        public virtual ObjectResult<SelectUserChats_Result> SelectUserChats(Nullable<int> skip, Nullable<int> take, Nullable<int> userLoggedId, string userName)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var userLoggedIdParameter = userLoggedId.HasValue ?
                new ObjectParameter("UserLoggedId", userLoggedId) :
                new ObjectParameter("UserLoggedId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectUserChats_Result>("SelectUserChats", skipParameter, takeParameter, userLoggedIdParameter, userNameParameter);
        }
    
        public virtual ObjectResult<SelectUsersByFilter_Result> SelectUsersByFilter(Nullable<int> skip, Nullable<int> take, Nullable<int> accountTypeId, Nullable<bool> isBlocked, Nullable<int> countryId, Nullable<System.DateTime> createDateFrom, Nullable<System.DateTime> createDateTo)
        {
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var accountTypeIdParameter = accountTypeId.HasValue ?
                new ObjectParameter("accountTypeId", accountTypeId) :
                new ObjectParameter("accountTypeId", typeof(int));
    
            var isBlockedParameter = isBlocked.HasValue ?
                new ObjectParameter("isBlocked", isBlocked) :
                new ObjectParameter("isBlocked", typeof(bool));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            var createDateFromParameter = createDateFrom.HasValue ?
                new ObjectParameter("createDateFrom", createDateFrom) :
                new ObjectParameter("createDateFrom", typeof(System.DateTime));
    
            var createDateToParameter = createDateTo.HasValue ?
                new ObjectParameter("createDateTo", createDateTo) :
                new ObjectParameter("createDateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectUsersByFilter_Result>("SelectUsersByFilter", skipParameter, takeParameter, accountTypeIdParameter, isBlockedParameter, countryIdParameter, createDateFromParameter, createDateToParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> Users_CheckFromLoginData(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("Users_CheckFromLoginData", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> Users_CheckFromUserNameIsValid(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("Users_CheckFromUserNameIsValid", userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ActiveAccountByPhoneAndCode(string phone, Nullable<int> code)
        {
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var codeParameter = code.HasValue ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ActiveAccountByPhoneAndCode", phoneParameter, codeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateActiveCode(string phone, Nullable<int> code)
        {
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var codeParameter = code.HasValue ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateActiveCode", phoneParameter, codeParameter);
        }
    
        public virtual ObjectResult<Users_SelectByPk_Result> Users_SelectByPk(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Users_SelectByPk_Result>("Users_SelectByPk", idParameter);
        }
    }
}
